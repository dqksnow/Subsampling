% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_glm_main_function.R
\name{ssp.glm}
\alias{ssp.glm}
\title{Optimal Subsampling Methods for Generalized Linear Models}
\usage{
ssp.glm(
  formula,
  data,
  subset = NULL,
  n.plt,
  n.ssp,
  family = "binomial",
  criterion = "optL",
  sampling.method = "poisson",
  likelihood = "weighted",
  control = list(...),
  contrasts = NULL,
  ...
)
}
\arguments{
\item{formula}{An object of class "formula" which describes the model to be
fitted.}

\item{data}{A data frame containing the variables in the model.}

\item{subset}{An optional vector specifying a subset of observations to be used.}

\item{n.plt}{The pilot subsample size (the first-step subsample size).
These samples will be used to estimate the pilot estimator as well as to
estimate the optimal subsampling probability.}

\item{n.ssp}{The expectation optimal subsample size (the second-step subsample
size). For \code{sampling.method = 'withReplacement'}, \code{n.ssp} is exactly the subsample size. For \code{sampling.method = 'poisson'}, \code{n.ssp} is the expectation of subsample size.}

\item{family}{\code{family} can be a character string naming a family function, a family function or the result of a call to a family function. Currently \code{'binomial'}, \code{'poisson'} and \code{'Gamma'} are implemented.}

\item{criterion}{The criterion of optimal subsampling probabilities.
Choices include \code{optA}, \code{optL}(default), \code{LCC} and \code{uniform}.}

\item{sampling.method}{The sampling method for drawing the optimal subsample.
Choices include \code{withReplacement} and \code{poisson}(default).}

\item{likelihood}{The type of the maximum likelihood function used to
calculate the optimal subsampling estimator. Choices include
\code{weighted} and \code{logOddsCorrection}.}

\item{control}{A list of parameters for controlling the sampling process. Default is \code{list(alpha=0, b=2)}.}

\item{contrasts}{An optional list. It specifies how categorical variables are represented in the design matrix. For example, \code{contrasts = list(v1 = 'contr.treatment', v2 = 'contr.sum')}.}

\item{...}{A list of parameters which will be passed to \code{svyglm()}.}
}
\value{
ssp.glm returns an object of class "ssp.glm" containing the following components (some are optional):

\describe{
\item{model.call}{model call}
\item{beta.plt}{pilot estimator}
\item{beta.ssp}{optimal subsample estimator.}
\item{coefficients}{weighted combination of \code{beta.plt} and \code{beta.ssp}.}
\item{cov.ssp}{covariance matrix of \code{beta.ssp}}
\item{cov}{covariance matrix of \code{beta.cmb}}
\item{index.plt}{index of pilot subsample in the full sample}
\item{index.ssp}{index of optimal subsample in the full sample}
\item{N}{number of observations in the full sample}
\item{subsample.size.expect}{expected subsample size}
\item{terms}{model terms}
}
}
\description{
This function fits generalized linear models using ....
}
\details{
As suggested by \code{survey::svyglm()}, for binomial and poisson families use \code{family=quasibinomial()} and \code{family=quasipoisson()} to avoid a warning "In eval(family$initialize) : non-integer #successes in a binomial glm!". The warning is due to the non-integer survey weights. The ‘quasi’ versions of the family objects give the same point estimates and do not give the warning. Subsampling methods only use point estimates from \code{svyglm()} for further computation so that would not bring problems. For Gamma family, it will only return the estimation of coefficients, not dispersion parameter.

\code{likelihood = logOddsCorrection} is implemented only for logistic regression (family = binomial or quasibonomial).

In \code{control}, alpha is the mixture proportions of optimal subsampling probability and
uniform sampling probability. b is the parameter controls the upper
threshold for optimal subsampling probability.
}
\examples{
# logistic regression
set.seed(2)
N <- 1e4
beta0 <- rep(-0.5, 7)
d <- length(beta0) - 1
X <- matrix(0, N, d)
generate_rexp <- function(x) x <- rexp(N, rate = 2)
X <- apply(X, 2, generate_rexp)
Y <- rbinom(N, 1, 1 - 1 / (1 + exp(beta0[1] + X \%*\% beta0[-1])))
data <- as.data.frame(cbind(Y, X))
formula <- Y ~ .
n.plt <- 500
n.ssp <- 1000
subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'quasibinomial',
criterion = "optL",
sampling.method = 'poisson',
likelihood = "logOddsCorrection")
summary(subsampling.results)
subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'binomial', 
criterion = "optL",
sampling.method = 'withReplacement', 
likelihood = "weighted")
summary(subsampling.results)
Uni.subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'binomial', 
criterion = 'uniform')
summary(Uni.subsampling.results)
############################################################################
# poisson regression
set.seed(1)
N <-  1e4
beta0 <- rep(0.5, 7)
d <- length(beta0) - 1
X <- matrix(runif(N * d), N, d)
epsilon <- runif(N)
lambda <- exp(beta0[1] + X \%*\% beta0[-1])
Y <- rpois(N, lambda)
data <- as.data.frame(cbind(Y, X))
formula <- Y ~ .
n.plt <- 200
n.ssp <- 600
subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'poisson',
criterion = "optL", 
sampling.method = 'poisson',
likelihood = "weighted")
summary(subsampling.results)
subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'poisson', 
criterion = "optL", 
sampling.method = 'withReplacement',
likelihood = "weighted")
summary(subsampling.results)
Uni.subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'poisson', 
criterion = 'uniform')
summary(Uni.subsampling.results)
############################################################################
# gamma regression
set.seed(1)
N <- 1e4
p <- 3
beta0 <- rep(0.5, p + 1)
d <- length(beta0) - 1
shape <- 2
X <- matrix(runif(N * d), N, d)
link_function <- function(X, beta0) 1 / (beta0[1] + X \%*\% beta0[-1])
scale <- link_function(X, beta0) / shape
Y <- rgamma(N, shape = shape, scale = scale)
data <- as.data.frame(cbind(Y, X))
formula <- Y ~ .
n.plt <- 200
n.ssp <- 1000
subsampling.results <- ssp.glm(formula = formula, 
data = data, 
n.plt = n.plt,
n.ssp = n.ssp,
family = 'Gamma',
criterion = "optL", 
sampling.method = 'poisson',
likelihood = "weighted")
summary(subsampling.results)
}
\references{
Wang, H. (2019). More efficient estimation for logistic regression with optimal subsamples. \emph{Journal of machine learning research}, \strong{20}(132), 1-59. \url{https://www.jmlr.org/papers/v20/18-596.html}

Ai, M., Yu, J., Zhang, H., & Wang, H. (2021). Optimal subsampling algorithms for big data regressions. \emph{Statistica Sinica}, \strong{31}(2), 749-772. \url{https://www.jstor.org/stable/27008061}

Wang, H., & Kim, J. K. (2022). Maximum sampled conditional likelihood for informative subsampling. \emph{Journal of machine learning research}, \strong{23}(332), 1-50. \url{https://www.jmlr.org/papers/v23/21-0506.html}
}
