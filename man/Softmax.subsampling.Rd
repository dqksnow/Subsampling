% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/softmax_main_function.R
\name{Softmax.subsampling}
\alias{Softmax.subsampling}
\title{Optimal Subsampling Method for Softmax Regression Models}
\usage{
Softmax.subsampling(
  X,
  Y,
  n.plt,
  n.ssp,
  criterion = c("OptL", "OptA", "MSPE", "LUC", "Uniform"),
  sampling.method = c("Poisson", "WithReplacement"),
  likelihood = c("Weighted", "MSCLE"),
  constraint = c("baseline", "summation"),
  alpha = 0,
  b = 2
)
}
\arguments{
\item{X}{An object of class "formula" which describes the model to be fitted.}

\item{Y}{A data frame containing the variables in the model. Usually it}

\item{n.plt}{The pilot subsample size (the first-step subsample size).}

\item{n.ssp}{The expected optimal subsample size (the second-step subsample.}

\item{criterion}{The criterion of optimal subsampling probabilities}

\item{sampling.method}{The sampling method for drawing the optimal subsample}

\item{likelihood}{The type of the maximum likelihood function used to}

\item{constraint}{1}

\item{alpha}{Mixture proportions of optimal subsampling probability and}

\item{b}{This parameter controls the upper threshold for optimal subsampling}
}
\value{
\describe{
\item{beta.plt}{pilot estimator}
\item{beta.ssp}{optimal subsample estimator}
\item{beta.cmb}{combined estimator of \code{beta.plt} and \code{beta.ssp}}
\item{var.plt}{covariance matrix of \code{beta.ssp}}
\item{var.ssp}{covariance matrix of \code{beta.cmb}}
\item{var.cmb}{covariance matrix of \code{beta.cmb}}
\item{P.cmb}{predicted probability matrix of full observations}
\item{index.plt}{index of pilot subsample}
\item{index.ssp}{index of optimal subsample}
}
}
\description{
Optimal Subsampling Method for Softmax Regression Models
}
\details{
details TBD
}
\examples{
# softmax regression
d <- 3 # dim of covariates
K <- 5 # K + 1 classes
G <- rbind(rep(-1/(K+1), K), diag(K) - 1/(K+1)) \%x\% diag(d)
N <- 5e4
beta.true <- 0.2 * matrix(-1, d, K)
beta.true.sum <- cbind(rep(1, d), beta.true)
set.seed(1)
mu <- rep(0, d)
sigma <- matrix(0.5, nrow = d, ncol = d)
diag(sigma) <- rep(1, d)
X <- MASS::mvrnorm(N, mu, sigma)
prob <- exp( X \%*\% beta.true.sum)
prob <- prob / rowSums(prob)
Y <- apply(prob, 1, function(row) sample(0:K, size = 1, prob = row))
n.plt <- 500
n.ssp <- 1000
WithRep.MSPE <- Softmax.subsampling(X, Y, n.plt, n.ssp, criterion = 'MSPE', 
sampling.method = 'WithReplacement', likelihood = 'Weighted',
constraint = 'baseline')
Poi.MSPE <- Softmax.subsampling(X, Y, n.plt, n.ssp, criterion = 'MSPE',
sampling.method = 'Poisson', likelihood = 'Weighted', 
constraint = 'baseline')
Poi.LUC <- Softmax.subsampling(X, Y, n.plt, n.ssp, criterion = 'LUC',
sampling.method = 'Poisson', likelihood = 'MSCLE', 
constraint = 'baseline')
Poi.MSCLE <- Softmax.subsampling(X, Y, n.plt, n.ssp, criterion = 'MSPE',
sampling.method = 'Poisson', likelihood = 'MSCLE', 
constraint = 'baseline')
Poi.Uni <- Softmax.subsampling(X, Y, n.plt, n.ssp, criterion = 'Uniform',
sampling.method = 'Poisson', constraint = 'baseline')
softmax.summary(WithRep.MSPE)
softmax.summary(Poi.MSPE)
softmax.summary(Poi.LUC)
softmax.summary(Poi.MSCLE)
softmax.summary(Poi.Uni)
}
