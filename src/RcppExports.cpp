// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// softmax_dL_sq_cpp
arma::mat softmax_dL_sq_cpp(const arma::mat& X, const arma::mat& Y_matrix, const arma::mat& P, const arma::vec& p, int K, int d, double scale);
RcppExport SEXP _subsampling_softmax_dL_sq_cpp(SEXP XSEXP, SEXP Y_matrixSEXP, SEXP PSEXP, SEXP pSEXP, SEXP KSEXP, SEXP dSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_matrix(Y_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_dL_sq_cpp(X, Y_matrix, P, p, K, d, scale));
    return rcpp_result_gen;
END_RCPP
}
// softmax_ddL_cpp
arma::mat softmax_ddL_cpp(const arma::mat& X, const arma::mat& P, const arma::vec& p, int K, int d, double scale);
RcppExport SEXP _subsampling_softmax_ddL_cpp(SEXP XSEXP, SEXP PSEXP, SEXP pSEXP, SEXP KSEXP, SEXP dSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_ddL_cpp(X, P, p, K, d, scale));
    return rcpp_result_gen;
END_RCPP
}
// softmax_Omega_cpp
arma::mat softmax_Omega_cpp(const arma::mat& X, const arma::mat& P1, const arma::vec& p, int K, int d, double scale);
RcppExport SEXP _subsampling_softmax_Omega_cpp(SEXP XSEXP, SEXP P1SEXP, SEXP pSEXP, SEXP KSEXP, SEXP dSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_Omega_cpp(X, P1, p, K, d, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_subsampling_softmax_dL_sq_cpp", (DL_FUNC) &_subsampling_softmax_dL_sq_cpp, 7},
    {"_subsampling_softmax_ddL_cpp", (DL_FUNC) &_subsampling_softmax_ddL_cpp, 6},
    {"_subsampling_softmax_Omega_cpp", (DL_FUNC) &_subsampling_softmax_Omega_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_subsampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
